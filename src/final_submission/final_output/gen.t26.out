.text
.globl main
main:
  jal L0
  li $v0,10
  syscall
.data
G0:
  # " = \n"
  .byte 32 , 61 , 32 , 10 , 0
  .align 2
.text
.data
G1:
  # "\t"
  .byte 9 , 0
  .align 2
.text
.data
G2:
  # " (base 2)\n"
  .byte 32 , 40 , 98 , 97 , 115 , 101 , 32 , 50 , 41 , 10 , 0
  .align 2
.text
.data
G3:
  # "\t"
  .byte 9 , 0
  .align 2
.text
.data
G4:
  # " (base 8)\n"
  .byte 32 , 40 , 98 , 97 , 115 , 101 , 32 , 56 , 41 , 10 , 0
  .align 2
.text
.data
G5:
  # "\t"
  .byte 9 , 0
  .align 2
.text
.data
G6:
  # " (base 10)\n"
  .byte 32 , 40 , 98 , 97 , 115 , 101 , 32 , 49 , 48 , 41 , 10 , 0
  .align 2
.text
.data
char: .space 2
.text
Lgetchar: 
  addi $sp,$sp,-4
  sw $s0,0($sp)
  li $v0,8
  la $a0,char
  la $a1,2
  syscall
  lb $v0,char
  li $s0,4
  beq $v0,$s0,Lgetchar_eof
  li $s0,0
  beq $v0,$s0,Lgetchar_eof
Lgetchar_return:
  lw $s0 0($sp)
  addi $sp,$sp,4
  jr $ra 
Lgetchar_eof:
  li $v0,-1
  j Lgetchar_return
Lprints: 
  li $v0,4
  syscall
  jr $ra 
Lprinti: 
  li $v0,1
  syscall
  jr $ra 
.data
return_err: .asciiz "Runtime error: Function did not return\n"
divzero_err: .asciiz "Runtime error: Division by zero\n"
.text
Lhalt: 
  li $v0,10
  syscall
  jr $ra 
Lprintb: 
  li $v0,1
  syscall
  jr $ra 
Lprintc: 
  li $v0,11
  syscall
  jr $ra 
L1: # convert
  addi $sp,$sp,-84
  sw $ra,0($sp)
  sw $a0,4($sp)
  sw $a1,8($sp)
  sw $t0,12($sp)
  sw $t1,16($sp)
  sw $t2,20($sp)
  sw $t3,24($sp)
  sw $t4,28($sp)
  sw $t5,32($sp)
  sw $t6,36($sp)
  sw $t7,40($sp)
  sw $t8,44($sp)
  sw $t9,48($sp)
  sw $s0,52($sp)
  sw $s1,56($sp)
  sw $s2,60($sp)
  sw $s3,64($sp)
  sw $s4,68($sp)
  sw $s5,72($sp)
  sw $s6,76($sp)
  sw $s7,80($sp)
L3: # if start
  li $s7,0
L5: # ==
  lw $s5,4($sp)
  beq $s5,$s7,L6
  li $s6,0
  j L7
L6:
  li $s6,1
L7:
  beq $s6,$zero,L4
  li $s7,0
  move $a0,$s7
  jal Lprinti
  j L1CLEANUP
L4: #if end
L8: # /
  lw $s7,4($sp)
  lw $s5,8($sp)
  bne $s5,$zero,L9
  la $a0,divzero_err
  jal Lprints
  jal Lhalt
L9: # / divzero skip
  div $s7,$s5
  mflo $s6
  move $a0,$s6
  lw $s6,8($sp)
  move $a1,$s6
  jal L1
L10: # %
  lw $s5,4($sp)
  lw $s7,8($sp)
  div $s5,$s7
  mfhi $s6
  move $a0,$s6
  jal Lprinti
L1CLEANUP: # convert return
  lw $t0,12($sp)
  lw $t1,16($sp)
  lw $t2,20($sp)
  lw $t3,24($sp)
  lw $t4,28($sp)
  lw $t5,32($sp)
  lw $t6,36($sp)
  lw $t7,40($sp)
  lw $t8,44($sp)
  lw $t9,48($sp)
  lw $s0,52($sp)
  lw $s1,56($sp)
  lw $s2,60($sp)
  lw $s3,64($sp)
  lw $s4,68($sp)
  lw $s5,72($sp)
  lw $s6,76($sp)
  lw $s7,80($sp)
  lw $ra,0($sp) # c
  addi $sp,$sp,84
  jr $ra
L2: # do
  addi $sp,$sp,-80
  sw $ra,0($sp)
  sw $a0,4($sp)
  sw $t0,8($sp)
  sw $t1,12($sp)
  sw $t2,16($sp)
  sw $t3,20($sp)
  sw $t4,24($sp)
  sw $t5,28($sp)
  sw $t6,32($sp)
  sw $t7,36($sp)
  sw $t8,40($sp)
  sw $t9,44($sp)
  sw $s0,48($sp)
  sw $s1,52($sp)
  sw $s2,56($sp)
  sw $s3,60($sp)
  sw $s4,64($sp)
  sw $s5,68($sp)
  sw $s6,72($sp)
  sw $s7,76($sp)
  lw $s7,4($sp)
  move $a0,$s7
  jal Lprinti
  la $a0,G0
  jal Lprints
  la $a0,G5
  jal Lprints
  li $s7,2
  lw $s6,4($sp)
  move $a0,$s6
  move $a1,$s7
  jal L1
  la $a0,G2
  jal Lprints
  la $a0,G5
  jal Lprints
  li $s7,8
  lw $s6,4($sp)
  move $a0,$s6
  move $a1,$s7
  jal L1
  la $a0,G4
  jal Lprints
  la $a0,G5
  jal Lprints
  li $s7,10
  lw $s6,4($sp)
  move $a0,$s6
  move $a1,$s7
  jal L1
  la $a0,G6
  jal Lprints
L2CLEANUP: # do return
  lw $t0,8($sp)
  lw $t1,12($sp)
  lw $t2,16($sp)
  lw $t3,20($sp)
  lw $t4,24($sp)
  lw $t5,28($sp)
  lw $t6,32($sp)
  lw $t7,36($sp)
  lw $t8,40($sp)
  lw $t9,44($sp)
  lw $s0,48($sp)
  lw $s1,52($sp)
  lw $s2,56($sp)
  lw $s3,60($sp)
  lw $s4,64($sp)
  lw $s5,68($sp)
  lw $s6,72($sp)
  lw $s7,76($sp)
  lw $ra,0($sp) # c
  addi $sp,$sp,80
  jr $ra
L0: # main
  addi $sp,$sp,-4
  sw $ra,0($sp)
  li $s7,0
  move $a0,$s7
  jal L2
  li $s7,17
  move $a0,$s7
  jal L2
  li $s7,42
  move $a0,$s7
  jal L2
  lw $ra,0($sp) # b
  addi $sp,$sp,4
  jr $ra
