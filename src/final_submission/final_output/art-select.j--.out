.text
.globl main
main:
  jal L0
  li $v0,10
  syscall
.data
G0:
   .word 0
.text
.data
G1:
   .word 0
.text
.data
G2:
   .word 0
.text
.data
G3:
   .word 0
.text
.data
G4:
   .word 0
.text
.data
G5:
   .word 0
.text
.data
G6:
   .word 0
.text
.data
G7:
   .word 0
.text
.data
G8:
   .word 0
.text
.data
G9:
   .word 0
.text
.data
G10:
   .word 0
.text
.data
G11:
   .word 0
.text
.data
G12:
   .word 0
.text
.data
G13:
   .word 0
.text
.data
G14:
   .word 0
.text
.data
G15:
   .word 0
.text
.data
G16:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G17:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G18:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G19:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G20:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G21:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G22:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G23:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G24:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G25:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G26:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G27:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G28:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G29:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G30:
  # " "
  .byte 32 , 0
  .align 2
.text
.data
G31:
  # "\n"
  .byte 10 , 0
  .align 2
.text
.data
G32:
   .word 0
.text
.data
char: .space 2
.text
Lgetchar: 
  addi $sp,$sp,-4
  sw $s0,0($sp)
  li $v0,8
  la $a0,char
  la $a1,2
  syscall
  lb $v0,char
  li $s0,4
  beq $v0,$s0,Lgetchar_eof
  li $s0,0
  beq $v0,$s0,Lgetchar_eof
Lgetchar_return:
  lw $s0 0($sp)
  addi $sp,$sp,4
  jr $ra 
Lgetchar_eof:
  li $v0,-1
  j Lgetchar_return
Lprints: 
  li $v0,4
  syscall
  jr $ra 
Lprinti: 
  li $v0,1
  syscall
  jr $ra 
.data
return_err: .asciiz "Runtime error: Function did not return\n"
divzero_err: .asciiz "Runtime error: Division by zero\n"
.text
Lhalt: 
  li $v0,10
  syscall
  jr $ra 
Lprintb: 
  li $v0,1
  syscall
  jr $ra 
Lprintc: 
  li $v0,11
  syscall
  jr $ra 
L0: # main
  addi $sp,$sp,-20
  sw $ra,0($sp)
  li $s7,1
  move $a0,$s7
  jal L2
  li $s7,0
L4: # =
  sw $s7,4($sp)
L5: # while start
  li $s7,14
L7: # <=
  lw $s5,4($sp)
  ble $s5,$s7,L8
  li $s6,0
  j L9
L8:
  li $s6,1
L9:
  beq $s6,$zero,L6
L10: # ifelse start
  li $s7,0
L13: # ==
  lw $s4,4($sp)
  beq $s4,$s7,L14
  li $s5,0
  j L15
L14:
  li $s5,1
L15:
  beq $s5,$zero,L11
  jal L3
  move $s7,$v0
  li $s4,100
L16: # %
  div $s7,$s4
  mfhi $s3
L17: # =
  sw $s3,G0
  j L12
L11: # ifelse else
L18: # ifelse start
  li $s3,1
L21: # ==
  lw $s7,4($sp)
  beq $s7,$s3,L22
  li $s4,0
  j L23
L22:
  li $s4,1
L23:
  beq $s4,$zero,L19
  jal L3
  move $s3,$v0
  li $s7,100
L24: # %
  div $s3,$s7
  mfhi $s2
L25: # =
  sw $s2,G1
  j L20
L19: # ifelse else
L26: # ifelse start
  li $s2,2
L29: # ==
  lw $s3,4($sp)
  beq $s3,$s2,L30
  li $s7,0
  j L31
L30:
  li $s7,1
L31:
  beq $s7,$zero,L27
  jal L3
  move $s2,$v0
  li $s3,100
L32: # %
  div $s2,$s3
  mfhi $s1
L33: # =
  sw $s1,G2
  j L28
L27: # ifelse else
L34: # ifelse start
  li $s1,3
L37: # ==
  lw $s2,4($sp)
  beq $s2,$s1,L38
  li $s3,0
  j L39
L38:
  li $s3,1
L39:
  beq $s3,$zero,L35
  jal L3
  move $s1,$v0
  li $s2,100
L40: # %
  div $s1,$s2
  mfhi $s0
L41: # =
  sw $s0,G3
  j L36
L35: # ifelse else
L42: # ifelse start
  li $s0,4
L45: # ==
  lw $s1,4($sp)
  beq $s1,$s0,L46
  li $s2,0
  j L47
L46:
  li $s2,1
L47:
  beq $s2,$zero,L43
  jal L3
  move $s0,$v0
  li $s1,100
L48: # %
  div $s0,$s1
  mfhi $t9
L49: # =
  sw $t9,G4
  j L44
L43: # ifelse else
L50: # ifelse start
  li $t9,5
L53: # ==
  lw $s0,4($sp)
  beq $s0,$t9,L54
  li $s1,0
  j L55
L54:
  li $s1,1
L55:
  beq $s1,$zero,L51
  jal L3
  move $t9,$v0
  li $s0,100
L56: # %
  div $t9,$s0
  mfhi $t8
L57: # =
  sw $t8,G5
  j L52
L51: # ifelse else
L58: # ifelse start
  li $t8,6
L61: # ==
  lw $t9,4($sp)
  beq $t9,$t8,L62
  li $s0,0
  j L63
L62:
  li $s0,1
L63:
  beq $s0,$zero,L59
  jal L3
  move $t8,$v0
  li $t9,100
L64: # %
  div $t8,$t9
  mfhi $t7
L65: # =
  sw $t7,G6
  j L60
L59: # ifelse else
L66: # ifelse start
  li $t7,7
L69: # ==
  lw $t8,4($sp)
  beq $t8,$t7,L70
  li $t9,0
  j L71
L70:
  li $t9,1
L71:
  beq $t9,$zero,L67
  jal L3
  move $t7,$v0
  li $t8,100
L72: # %
  div $t7,$t8
  mfhi $t6
L73: # =
  sw $t6,G7
  j L68
L67: # ifelse else
L74: # ifelse start
  li $t6,8
L77: # ==
  lw $t7,4($sp)
  beq $t7,$t6,L78
  li $t8,0
  j L79
L78:
  li $t8,1
L79:
  beq $t8,$zero,L75
  jal L3
  move $t6,$v0
  li $t7,100
L80: # %
  div $t6,$t7
  mfhi $t5
L81: # =
  sw $t5,G8
  j L76
L75: # ifelse else
L82: # ifelse start
  li $t5,9
L85: # ==
  lw $t6,4($sp)
  beq $t6,$t5,L86
  li $t7,0
  j L87
L86:
  li $t7,1
L87:
  beq $t7,$zero,L83
  jal L3
  move $t5,$v0
  li $t6,100
L88: # %
  div $t5,$t6
  mfhi $t4
L89: # =
  sw $t4,G9
  j L84
L83: # ifelse else
L90: # ifelse start
  li $t4,10
L93: # ==
  lw $t5,4($sp)
  beq $t5,$t4,L94
  li $t6,0
  j L95
L94:
  li $t6,1
L95:
  beq $t6,$zero,L91
  jal L3
  move $t4,$v0
  li $t5,100
L96: # %
  div $t4,$t5
  mfhi $t3
L97: # =
  sw $t3,G10
  j L92
L91: # ifelse else
L98: # ifelse start
  li $t3,11
L101: # ==
  lw $t4,4($sp)
  beq $t4,$t3,L102
  li $t5,0
  j L103
L102:
  li $t5,1
L103:
  beq $t5,$zero,L99
  jal L3
  move $t3,$v0
  li $t4,100
L104: # %
  div $t3,$t4
  mfhi $t2
L105: # =
  sw $t2,G11
  j L100
L99: # ifelse else
L106: # ifelse start
  li $t2,12
L109: # ==
  lw $t3,4($sp)
  beq $t3,$t2,L110
  li $t4,0
  j L111
L110:
  li $t4,1
L111:
  beq $t4,$zero,L107
  jal L3
  move $t2,$v0
  li $t3,100
L112: # %
  div $t2,$t3
  mfhi $t1
L113: # =
  sw $t1,G12
  j L108
L107: # ifelse else
L114: # ifelse start
  li $t1,13
L117: # ==
  lw $t2,4($sp)
  beq $t2,$t1,L118
  li $t3,0
  j L119
L118:
  li $t3,1
L119:
  beq $t3,$zero,L115
  jal L3
  move $t1,$v0
  li $t2,100
L120: # %
  div $t1,$t2
  mfhi $t0
L121: # =
  sw $t0,G13
  j L116
L115: # ifelse else
L122: # if start
  li $t0,14
L124: # ==
  lw $t1,4($sp)
  beq $t1,$t0,L125
  li $t2,0
  j L126
L125:
  li $t2,1
L126:
  beq $t2,$zero,L123
  jal L3
  move $t0,$v0
  li $t1,100
L127: # %
Too complex - not enough free registers in main scope
